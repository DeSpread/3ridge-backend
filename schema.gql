# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AptosRequestClaimNFTResponse {
  txHash: String!
}

type AuthResponse {
  accessToken: String
}

enum CategoryType {
  DEFI
  LAYER1
  LAYER2
  NFT
}

enum ChainType {
  APTOS
  EVM
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type IsCompletedQuestByUserIdResponse {
  isCompleted: Boolean!
  questId: String!
}

type Mutation {
  checkAndUpdateWinner(ticketId: String!, userId: String!): Ticket!
  completeQuestOfUser(questId: String!, ticketId: String!, userId: String!): Quest!
  createProject(categories: [CategoryType!], description: String, imageUrl: String, name: String!, projectSocial: ProjectSocialInputType): Project!
  createTicket(description: String, imageUrl: String, project: String, quests: [QuestInputType!], rewardPolicy: RewardPolicyInputType, title: String, untilTime: DateTime): Ticket!
  createUserByEmail(email: String!): User!
  createUserByGmail(gmail: String!, profileImageUrl: String): User!
  createUserByWallet(address: String!, chain: ChainType!): User!
  participateTicketOfUser(ticketId: String!, userId: String!): Ticket!
  removeProject(projectId: String!): Project!
  removeTicketById(ticketId: String!): Ticket!
  removeUserByName(name: String!): User!
  requestClaimNFT(collectionName: String!, nftTokenName: String!, receiverAddress: String!, ticketId: String!, userId: String!): AptosRequestClaimNFTResponse!
  updateProject(categories: [CategoryType!], description: String, imageUrl: String, name: String, projectId: String!, projectSocial: ProjectSocialInputType, tickets: [TicketInputType!]): Project!
  updateTicketById(completed: Boolean, description: String, imageUrl: String, participants: [UserInputType!], project: String, quests: [QuestInputType!], rewardPolicy: RewardPolicyInputType, ticketId: String!, title: String, untilTime: DateTime, winners: [UserInputType!]): Ticket!
  updateUserByName(name: String!, userUpdateInput: UserUpdateInput!): User!
  verifyTwitterFollowQuest(questId: String!, ticketId: String!, userId: String!): Quest!
  verifyTwitterLikingQuest(questId: String!, ticketId: String!, userId: String!): Quest!
  verifyTwitterRetweetQuest(questId: String!, ticketId: String!, userId: String!): Quest!
}

type Project {
  _id: String
  categories: [CategoryType!]
  description: String
  imageUrl: String
  managedUsers: [User!]
  name: String!
  projectSocial: ProjectSocial
  tickets: [Ticket!]
}

input ProjectInputType {
  _id: String
  categories: [CategoryType!]
  description: String
  imageUrl: String
  managedUsers: [UserInputType!]
  name: String!
  projectSocial: ProjectSocialInputType
  tickets: [TicketInputType!]
}

type ProjectSocial {
  discordUrl: String
  officialUrl: String
  telegramUrl: String
  twitterUrl: String
}

input ProjectSocialInputType {
  discordUrl: String
  officialUrl: String
  telegramUrl: String
  twitterUrl: String
}

type Query {
  auth(userId: String!): AuthResponse!
  availableTickets: [Ticket!]!
  checkTokenBalanceByWalletAddress(collectionName: String!, receiverAddress: String!, tokenName: String!): Float!
  completedTickets: [Ticket!]!
  findMissedTickets: [Ticket!]!
  findQuestById(questId: String!): Quest!
  findRankByUserId(skip: Int = 0, take: Int = 25, userId: String!): Float!
  isCompletedQuestByUserId(questId: String!, userId: String!): IsCompletedQuestByUserIdResponse!
  isCompletedTicket(ticketId: String!, userId: String!): Boolean!
  isFollowTwitterByUserId(targetTwitterUsername: String!, userId: String!): User!
  isLikingTweetByUserId(targetTweetId: String!, userId: String!): User!
  isRetweetedTwitterByUserId(targetTweetId: String!, userId: String!): User!
  isWinner(ticketId: String!, userId: String!): Boolean!
  projectById(projectId: String!): Project!
  projectByName(projectName: String!): [Project!]!
  projects: [Project!]!
  ticketById(ticketId: String!): Ticket!
  tickets(sort: TicketSortType = TRENDING, status: TicketStatusType = ALL): [Ticket!]!
  ticketsByProjectId(projectId: String!, sort: TicketSortType = TRENDING, status: TicketStatusType = ALL): [Ticket!]!
  userByEmail(email: String!): User!
  userByGmail(gmail: String!): User!
  userByName(name: String!): User!
  userByWalletAddress(walletAddress: String!): User!
  users: [User!]!
  usersOrderByRewardPointDesc(skip: Int = 0, take: Int = 25): [User!]!
}

type Quest {
  _id: String
  completedUsers: [User!]
  description: String
  questPolicy: QuestPolicy
  title: String
}

input QuestInputType {
  _id: String
  completedUsers: [UserInputType!]
  description: String
  questPolicy: QuestPolicyInputType
  title: String
}

type QuestPolicy {
  context: String!
  questPolicy: QuestPolicyType!
}

input QuestPolicyInputType {
  context: String!
  questPolicy: QuestPolicyType!
}

enum QuestPolicyType {
  QUIZ
  VERIFY_CONTRACT
  VERIFY_DISCORD
  VERIFY_TWITTER_FOLLOW
  VERIFY_TWITTER_LIKING
  VERIFY_TWITTER_RETWEET
}

type RewardPolicy {
  context: String!
  rewardPoint: Float!
  rewardPolicyType: RewardPolicyType!
}

input RewardPolicyInputType {
  context: String!
  rewardPoint: Float!
  rewardPolicyType: RewardPolicyType!
}

enum RewardPolicyType {
  FCFS
  LUCKY_DRAW
}

type Ticket {
  _id: String
  beginTime: DateTime
  completed: Boolean
  description: String
  imageUrl: String
  participantCount: Float
  participants: [User!]
  project: Project
  quests: [Quest!]
  rewardPolicy: RewardPolicy
  title: String
  untilTime: DateTime
  winners: [User!]
}

input TicketInputType {
  _id: String
  beginTime: DateTime
  completed: Boolean
  description: String
  imageUrl: String
  participantCount: Float
  participants: [UserInputType!]
  project: ProjectInputType
  quests: [QuestInputType!]
  rewardPolicy: RewardPolicyInputType
  title: String
  untilTime: DateTime
  winners: [UserInputType!]
}

enum TicketSortType {
  NEWEST
  TRENDING
}

enum TicketStatusType {
  ALL
  AVAILABLE
  COMPLETED
  MISSED
}

type User {
  _id: String
  email: String
  gmail: String
  managedProjects: [Project!]
  name: String
  profileImageUrl: String
  rewardPoint: Float
  tickets: [Ticket!]
  userSocial: UserSocial
  wallets: [UserWallet!]
}

input UserInputType {
  _id: String
  email: String
  gmail: String
  managedProjects: [ProjectInputType!]
  name: String
  profileImageUrl: String
  rewardPoint: Float
  tickets: [TicketInputType!]
  userSocial: UserSocialInputType
  wallets: [UserWalletInputType!]
}

type UserSocial {
  twitterId: String
}

input UserSocialInputType {
  twitterId: String
}

input UserUpdateInput {
  email: String
  gmail: String
  profileImageUrl: String
  rewardPoint: Float
  userSocial: UserSocialInputType
  wallets: [UserWalletInputType!]
}

type UserWallet {
  address: String!
  chain: ChainType!
}

input UserWalletInputType {
  address: String!
  chain: ChainType!
}