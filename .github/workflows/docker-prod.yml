name: Production - Docker Image CI/CD with arguments

on:
  push:
    branches: [ main ]

env:
  VERSION: ${{ github.sha }}
  DOCKER_IMAGE_NAME: 3ridge-backend
  DOCKER_IMAGE_TAG: release
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push register app
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: ./docker/Dockerfile.prod
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          build-args: |
            DATABASE_MONGODB_ENDPOINT=${{ secrets.PROD_DATABASE_MONGODB_ENDPOINT }}
            AUTH_JWT_SECRET=${{ secrets.PROD_AUTH_JWT_SECRET }}
            TWITTER_BEARER=${{ secrets.PROD_TWITTER_BEARER }}
            APTOS_PRIVATE_KEY=${{ secrets.PROD_APTOS_PRIVATE_KEY }}
            ELASTICSEARCH_ENDPOINT=${{ secrets.ELASTICSEARCH_ENDPOINT }}
            ELASTICSEARCH_AUTH_USERNAME=${{ secrets.ELASTICSEARCH_AUTH_USERNAME }}
            ELASTICSEARCH_AUTH_PASSWORD=${{ secrets.ELASTICSEARCH_AUTH_PASSWORD }}
            ELASTICSEARCH_LOG_INDEX=${{ secrets.PROD_ELASTICSEARCH_LOG_INDEX }}
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: ssh connect & restart docker - prod1, prod2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST1 }},${{ secrets.PROD_HOST2 }}
          sync: true
          script_stop: true
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            images=$(docker images -q)
            count=$(echo "$images" | wc -l)
            if (( count >= 2 )); then
              image=$(docker images -q | tail -n 1)
              if [ -n "$image" ]; then
                docker rmi $image
              fi
            fi
            containers=$(docker ps -a -q)
            if [ -n "$containers" ]; then
              docker stop $containers
              docker rm $containers
            fi
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            docker run -d -p 3000:3000 --name ${{ env.DOCKER_IMAGE_NAME }}-${{ env.DOCKER_IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            docker system prune --volumes
            for v in $(sudo docker volume ls -qf 'dangling=true'); do sudo docker volume rm "$v"; done